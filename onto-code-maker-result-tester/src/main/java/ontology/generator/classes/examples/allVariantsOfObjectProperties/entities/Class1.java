package ontology.generator.classes.examples.allVariantsOfObjectProperties.entities;

import org.eclipse.rdf4j.model.*;
import java.util.List;
import java.util.ArrayList;
import ontology.generator.classes.examples.allVariantsOfObjectProperties.Vocabulary;

/**
*  This is the class representing the Class1 class from ontology
*
*   Generated by OntoCodeMaker
**/
public class Class1 implements  UnionOfClass2Class1Abstract {

    // IRI instance
    protected IRI iri;
    // IRI Constant of Class
    public static IRI CLASS_IRI = Vocabulary.CLASS1_CLASS_IRI;

    /**
    * Property http://example.com/normalObjectProperty
    **/
    private List<Class2Int> normalObjectProperty = new ArrayList<>();

    /**
    * Property http://example.com/subPropertyOfEquivalentObjectProperty
    * The property is SubProperty of  equivalentObjectProperty
    **/
    private List<Class2Int> subPropertyOfEquivalentObjectProperty = new ArrayList<>();

    /**
    * Property http://example.com/equivalentObjectProperty
    * The property is equivalent to normalObjectProperty
    **/
    private List<Class2Int> equivalentObjectProperty = new ArrayList<>();

    /**
    * Property http://example.com/equivalentToEquivalentObjectProperty
    * The property is equivalent to equivalentObjectProperty
    **/
    private List<Class2Int> equivalentToEquivalentObjectProperty = new ArrayList<>();

    /**
    * Property http://example.com/subPropertyOfObjectProperty
    * The property is SubProperty of  normalObjectProperty
    **/
    private List<Class2Int> subPropertyOfObjectProperty = new ArrayList<>();

    /**
    * Property http://example.com/equivalentToSubpropertyObjectProperty
    * The property is equivalent to subPropertyOfObjectProperty
    **/
    private List<Class2Int> equivalentToSubpropertyObjectProperty = new ArrayList<>();

    /**
    * Property http://example.com/subPropertyOfSubpropertyObjectProperty
    * The property is SubProperty of  subPropertyOfObjectProperty
    **/
    private List<Class2Int> subPropertyOfSubpropertyObjectProperty = new ArrayList<>();

    /**
    * Property http://example.com/inverseFunctionalObjectProperty
    **/
    private List<Class2Int> inverseFunctionalObjectProperty = new ArrayList<>();

    /**
    * Property http://example.com/equivalentToInverseFunctionalObjectProperty
    * The property is equivalent to inverseFunctionalObjectProperty
    **/
    private List<Class2Int> equivalentToInverseFunctionalObjectProperty = new ArrayList<>();

    /**
    * Property http://example.com/subPropertyOfInverseFunctionalObjectProperty
    * The property is SubProperty of  inverseFunctionalObjectProperty
    **/
    private List<Class2Int> subPropertyOfInverseFunctionalObjectProperty = new ArrayList<>();

    /**
    * Property http://example.com/functionalObjectProperty2
    **/
    private Class2Int functionalObjectProperty2;

    /**
    * Property http://example.com/inverseFunctionalObjectProperty2
    **/
    private List<Class2Int> inverseFunctionalObjectProperty2 = new ArrayList<>();

    /**
    * Property http://example.com/functionalObjectProperty
    **/
    private Class2Int functionalObjectProperty;

    /**
    * Property http://example.com/equivalentToFunctionalObjectProperty
    * The property is equivalent to functionalObjectProperty
    **/
    private Class2Int equivalentToFunctionalObjectProperty;

    /**
    * Property http://example.com/subPropertyOfFunctionalObjectProperty
    * The property is SubProperty of  functionalObjectProperty
    **/
    private List<Class2Int> subPropertyOfFunctionalObjectProperty = new ArrayList<>();

    /**
    * Property http://example.com/domainIsAbstractUnionFunctional. This property is from super class.
    **/
    private Class3 domainIsAbstractUnionFunctional;


    public Class1(IRI iri){
            this.iri = iri;
    }

    public IRI getIri(){
        return iri;
    }

    public IRI getClassIRI() {
        return CLASS_IRI;
    }

    public void addNormalObjectProperty(Class2Int normalObjectProperty){
        this.normalObjectProperty.add(normalObjectProperty);
        if(!this.equivalentToEquivalentObjectProperty.contains(normalObjectProperty)){
            this.equivalentToEquivalentObjectProperty.add(normalObjectProperty);
        }
        if(!this.equivalentObjectProperty.contains(normalObjectProperty)){
            this.equivalentObjectProperty.add(normalObjectProperty);
        }
    }
    public List<Class2Int> getNormalObjectProperty(){
        return normalObjectProperty;
    }

    public void addSubPropertyOfEquivalentObjectProperty(Class2Int subPropertyOfEquivalentObjectProperty){
        this.subPropertyOfEquivalentObjectProperty.add(subPropertyOfEquivalentObjectProperty);
        if(!this.equivalentObjectProperty.contains(subPropertyOfEquivalentObjectProperty)){
            this.equivalentObjectProperty.add(subPropertyOfEquivalentObjectProperty);
        }
        if(!this.normalObjectProperty.contains(subPropertyOfEquivalentObjectProperty)){
            this.normalObjectProperty.add(subPropertyOfEquivalentObjectProperty);
        }
        if(!this.equivalentToEquivalentObjectProperty.contains(subPropertyOfEquivalentObjectProperty)){
            this.equivalentToEquivalentObjectProperty.add(subPropertyOfEquivalentObjectProperty);
        }
    }
    public List<Class2Int> getSubPropertyOfEquivalentObjectProperty(){
        return subPropertyOfEquivalentObjectProperty;
    }

    public List<Class2Int> getEquivalentObjectProperty(){
        return equivalentObjectProperty;
    }

    public List<Class2Int> getEquivalentToEquivalentObjectProperty(){
        return equivalentToEquivalentObjectProperty;
    }

    public void addSubPropertyOfObjectProperty(Class2Int subPropertyOfObjectProperty){
        this.subPropertyOfObjectProperty.add(subPropertyOfObjectProperty);
        if(!this.normalObjectProperty.contains(subPropertyOfObjectProperty)){
            this.normalObjectProperty.add(subPropertyOfObjectProperty);
        }
        if(!this.equivalentToEquivalentObjectProperty.contains(subPropertyOfObjectProperty)){
            this.equivalentToEquivalentObjectProperty.add(subPropertyOfObjectProperty);
        }
        if(!this.equivalentObjectProperty.contains(subPropertyOfObjectProperty)){
            this.equivalentObjectProperty.add(subPropertyOfObjectProperty);
        }
        if(!this.equivalentToSubpropertyObjectProperty.contains(subPropertyOfObjectProperty)){
            this.equivalentToSubpropertyObjectProperty.add(subPropertyOfObjectProperty);
        }
    }
    public List<Class2Int> getSubPropertyOfObjectProperty(){
        return subPropertyOfObjectProperty;
    }

    public List<Class2Int> getEquivalentToSubpropertyObjectProperty(){
        return equivalentToSubpropertyObjectProperty;
    }

    public void addSubPropertyOfSubpropertyObjectProperty(Class2Int subPropertyOfSubpropertyObjectProperty){
        this.subPropertyOfSubpropertyObjectProperty.add(subPropertyOfSubpropertyObjectProperty);
        if(!this.subPropertyOfObjectProperty.contains(subPropertyOfSubpropertyObjectProperty)){
            this.subPropertyOfObjectProperty.add(subPropertyOfSubpropertyObjectProperty);
        }
        if(!this.normalObjectProperty.contains(subPropertyOfSubpropertyObjectProperty)){
            this.normalObjectProperty.add(subPropertyOfSubpropertyObjectProperty);
        }
        if(!this.equivalentToEquivalentObjectProperty.contains(subPropertyOfSubpropertyObjectProperty)){
            this.equivalentToEquivalentObjectProperty.add(subPropertyOfSubpropertyObjectProperty);
        }
        if(!this.equivalentObjectProperty.contains(subPropertyOfSubpropertyObjectProperty)){
            this.equivalentObjectProperty.add(subPropertyOfSubpropertyObjectProperty);
        }
        if(!this.equivalentToSubpropertyObjectProperty.contains(subPropertyOfSubpropertyObjectProperty)){
            this.equivalentToSubpropertyObjectProperty.add(subPropertyOfSubpropertyObjectProperty);
        }
    }
    public List<Class2Int> getSubPropertyOfSubpropertyObjectProperty(){
        return subPropertyOfSubpropertyObjectProperty;
    }

    public void addInverseFunctionalObjectProperty(Class2Int inverseFunctionalObjectProperty){
        this.inverseFunctionalObjectProperty.add(inverseFunctionalObjectProperty);
        if(!this.equivalentToInverseFunctionalObjectProperty.contains(inverseFunctionalObjectProperty)){
            this.equivalentToInverseFunctionalObjectProperty.add(inverseFunctionalObjectProperty);
        }
    }
    public List<Class2Int> getInverseFunctionalObjectProperty(){
        return inverseFunctionalObjectProperty;
    }

    public List<Class2Int> getEquivalentToInverseFunctionalObjectProperty(){
        return equivalentToInverseFunctionalObjectProperty;
    }

    public void addSubPropertyOfInverseFunctionalObjectProperty(Class2Int subPropertyOfInverseFunctionalObjectProperty){
        this.subPropertyOfInverseFunctionalObjectProperty.add(subPropertyOfInverseFunctionalObjectProperty);
        if(!this.inverseFunctionalObjectProperty.contains(subPropertyOfInverseFunctionalObjectProperty)){
            this.inverseFunctionalObjectProperty.add(subPropertyOfInverseFunctionalObjectProperty);
        }
        if(!this.equivalentToInverseFunctionalObjectProperty.contains(subPropertyOfInverseFunctionalObjectProperty)){
            this.equivalentToInverseFunctionalObjectProperty.add(subPropertyOfInverseFunctionalObjectProperty);
        }
    }
    public List<Class2Int> getSubPropertyOfInverseFunctionalObjectProperty(){
        return subPropertyOfInverseFunctionalObjectProperty;
    }

    public void setFunctionalObjectProperty2(Class2Int functionalObjectProperty2){
        this.functionalObjectProperty2 = functionalObjectProperty2;
    }
    public Class2Int getFunctionalObjectProperty2(){
        return functionalObjectProperty2;
    }

    public void addInverseFunctionalObjectProperty2(Class2Int inverseFunctionalObjectProperty2){
        this.inverseFunctionalObjectProperty2.add(inverseFunctionalObjectProperty2);
    }
    public List<Class2Int> getInverseFunctionalObjectProperty2(){
        return inverseFunctionalObjectProperty2;
    }

    public void setFunctionalObjectProperty(Class2Int functionalObjectProperty){
        this.functionalObjectProperty = functionalObjectProperty;
        if(this.equivalentToFunctionalObjectProperty == null || !this.equivalentToFunctionalObjectProperty.equals(functionalObjectProperty)){
            this.equivalentToFunctionalObjectProperty = functionalObjectProperty;
        }
    }
    public Class2Int getFunctionalObjectProperty(){
        return functionalObjectProperty;
    }

    public Class2Int getEquivalentToFunctionalObjectProperty(){
        return equivalentToFunctionalObjectProperty;
    }

    public void addSubPropertyOfFunctionalObjectProperty(Class2Int subPropertyOfFunctionalObjectProperty){
        this.subPropertyOfFunctionalObjectProperty.add(subPropertyOfFunctionalObjectProperty);
        if(this.functionalObjectProperty == null || !this.functionalObjectProperty.equals(subPropertyOfFunctionalObjectProperty)){
            this.functionalObjectProperty = subPropertyOfFunctionalObjectProperty;
        }
        if(this.equivalentToFunctionalObjectProperty == null || !this.equivalentToFunctionalObjectProperty.equals(subPropertyOfFunctionalObjectProperty)){
            this.equivalentToFunctionalObjectProperty = subPropertyOfFunctionalObjectProperty;
        }
    }
    public List<Class2Int> getSubPropertyOfFunctionalObjectProperty(){
        return subPropertyOfFunctionalObjectProperty;
    }


    public void setDomainIsAbstractUnionFunctional(Class3 domainIsAbstractUnionFunctional){
        this.domainIsAbstractUnionFunctional = domainIsAbstractUnionFunctional;
    }
    public Class3 getDomainIsAbstractUnionFunctional(){
        return domainIsAbstractUnionFunctional;
    }

}

