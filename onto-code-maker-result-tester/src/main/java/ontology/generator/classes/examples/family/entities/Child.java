package ontology.generator.classes.examples.family.entities;

import org.eclipse.rdf4j.model.*;
import java.util.List;
import java.util.ArrayList;
import ontology.generator.classes.examples.family.Vocabulary;

/**
*  This is the class representing the Child(http://www.ontocodemaker.org/Family#Child) class from ontology
*
*   Generated by OntoCodeMaker
**/
public class Child implements  OntoEntity {

    // IRI instance
    protected IRI iri;
    // IRI Constant of Class
    public static IRI CLASS_IRI = Vocabulary.CHILD_CLASS_IRI;

    /**
    * Property http://www.ontocodemaker.org/Family#hasParent
    **/
    private List<ParentInt> hasParent = new ArrayList<>();

    /**
    * Property http://www.ontocodemaker.org/Family#parent
    **/
    private ParentInt parent;

    /**
    * Property http://www.ontocodemaker.org/Family#hasFather
    * The property is SubProperty of  hasParent
    **/
    private List<ParentInt> hasFather = new ArrayList<>();


    public Child(IRI iri){
            this.iri = iri;
    }

    public IRI getIri(){
        return iri;
    }

    public IRI getClassIRI() {
        return CLASS_IRI;
    }

    public void addHasParent(ParentInt hasParent){
        this.hasParent.add(hasParent);
    }
    public List<ParentInt> getHasParent(){
        return hasParent;
    }

    public void setParent(ParentInt parent){
        this.parent = parent;
    }
    public ParentInt getParent(){
        return parent;
    }

    public void addHasFather(ParentInt hasFather){
        this.hasFather.add(hasFather);
        if(!this.hasParent.contains(hasFather)){
            this.hasParent.add(hasFather);
        }
    }
    public List<ParentInt> getHasFather(){
        return hasFather;
    }



}

