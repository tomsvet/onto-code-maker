package ontology.generator.classes.examples.allVariantsOfDatatypeProperties.entities;

import org.eclipse.rdf4j.model.*;
import java.util.List;
import java.util.ArrayList;
import ontology.generator.classes.examples.allVariantsOfDatatypeProperties.Vocabulary;

/**
*  This is the class representing the Class2 class from ontology
*
*   Generated by OntoCodeMaker
**/
public class Class2 implements  Class2Int {

    // IRI instance
    protected IRI iri;
    // IRI Constant of Class
    public static IRI CLASS_IRI = Vocabulary.CLASS2_CLASS_IRI;

    /**
    * Property http://example.com/hasInt2
    **/
    private List<Integer> hasInt2 = new ArrayList<>();

    /**
    * Property http://example.com/hasIntSubpropertyOfEquivalent
    * The property is SubProperty of  hasIntEquivalent2
    **/
    private List<Integer> hasIntSubpropertyOfEquivalent = new ArrayList<>();

    /**
    * Property http://example.com/hasIntEquivalent2
    * The property is equivalent to hasInt2
    **/
    private List<Integer> hasIntEquivalent2 = new ArrayList<>();

    /**
    * Property http://example.com/hasIntSubpropertyOfDOubleEquivalents
    * The property is SubProperty of  hasIntEquivalentOfEquivalent
    **/
    private List<Integer> hasIntSubpropertyOfDOubleEquivalents = new ArrayList<>();

    /**
    * Property http://example.com/hasIntEquivalentOfEquivalent
    * The property is equivalent to hasIntEquivalent2
    **/
    private List<Integer> hasIntEquivalentOfEquivalent = new ArrayList<>();

    /**
    * Property http://example.com/hasInt3
    **/
    private List<Integer> hasInt3 = new ArrayList<>();

    /**
    * Property http://example.com/hasIntSubproperty2
    * The property is SubProperty of  hasInt3
    **/
    private List<Integer> hasIntSubproperty2 = new ArrayList<>();

    /**
    * Property http://example.com/hasIntEquivalentOfSubproperty
    * The property is equivalent to hasIntSubproperty2
    **/
    private List<Integer> hasIntEquivalentOfSubproperty = new ArrayList<>();

    /**
    * Property http://example.com/domainIsAbstractUnionFunctional. This property is from super class.
    **/
    private String domainIsAbstractUnionFunctional;


    public Class2(IRI iri){
            this.iri = iri;
    }

    public IRI getIri(){
        return iri;
    }

    public IRI getClassIRI() {
        return CLASS_IRI;
    }

    public void addHasInt2(Integer hasInt2){
        this.hasInt2.add(hasInt2);
        if(!this.hasIntEquivalentOfEquivalent.contains(hasInt2)){
            this.hasIntEquivalentOfEquivalent.add(hasInt2);
        }
        if(!this.hasIntEquivalent2.contains(hasInt2)){
            this.hasIntEquivalent2.add(hasInt2);
        }
    }
    public List<Integer> getHasInt2(){
        return hasInt2;
    }

    public void addHasIntSubpropertyOfEquivalent(Integer hasIntSubpropertyOfEquivalent){
        this.hasIntSubpropertyOfEquivalent.add(hasIntSubpropertyOfEquivalent);
        if(!this.hasIntEquivalent2.contains(hasIntSubpropertyOfEquivalent)){
            this.hasIntEquivalent2.add(hasIntSubpropertyOfEquivalent);
        }
        if(!this.hasInt2.contains(hasIntSubpropertyOfEquivalent)){
            this.hasInt2.add(hasIntSubpropertyOfEquivalent);
        }
        if(!this.hasIntEquivalentOfEquivalent.contains(hasIntSubpropertyOfEquivalent)){
            this.hasIntEquivalentOfEquivalent.add(hasIntSubpropertyOfEquivalent);
        }
    }
    public List<Integer> getHasIntSubpropertyOfEquivalent(){
        return hasIntSubpropertyOfEquivalent;
    }

    public List<Integer> getHasIntEquivalent2(){
        return hasIntEquivalent2;
    }

    public void addHasIntSubpropertyOfDOubleEquivalents(Integer hasIntSubpropertyOfDOubleEquivalents){
        this.hasIntSubpropertyOfDOubleEquivalents.add(hasIntSubpropertyOfDOubleEquivalents);
        if(!this.hasIntEquivalentOfEquivalent.contains(hasIntSubpropertyOfDOubleEquivalents)){
            this.hasIntEquivalentOfEquivalent.add(hasIntSubpropertyOfDOubleEquivalents);
        }
        if(!this.hasIntEquivalent2.contains(hasIntSubpropertyOfDOubleEquivalents)){
            this.hasIntEquivalent2.add(hasIntSubpropertyOfDOubleEquivalents);
        }
        if(!this.hasIntEquivalent2.contains(hasIntSubpropertyOfDOubleEquivalents)){
            this.hasIntEquivalent2.add(hasIntSubpropertyOfDOubleEquivalents);
        }
    }
    public List<Integer> getHasIntSubpropertyOfDOubleEquivalents(){
        return hasIntSubpropertyOfDOubleEquivalents;
    }

    public List<Integer> getHasIntEquivalentOfEquivalent(){
        return hasIntEquivalentOfEquivalent;
    }

    public void addHasInt3(Integer hasInt3){
        this.hasInt3.add(hasInt3);
    }
    public List<Integer> getHasInt3(){
        return hasInt3;
    }

    public void addHasIntSubproperty2(Integer hasIntSubproperty2){
        this.hasIntSubproperty2.add(hasIntSubproperty2);
        if(!this.hasInt3.contains(hasIntSubproperty2)){
            this.hasInt3.add(hasIntSubproperty2);
        }
        if(!this.hasIntEquivalentOfSubproperty.contains(hasIntSubproperty2)){
            this.hasIntEquivalentOfSubproperty.add(hasIntSubproperty2);
        }
    }
    public List<Integer> getHasIntSubproperty2(){
        return hasIntSubproperty2;
    }

    public List<Integer> getHasIntEquivalentOfSubproperty(){
        return hasIntEquivalentOfSubproperty;
    }


    public void setDomainIsAbstractUnionFunctional(String domainIsAbstractUnionFunctional){
        this.domainIsAbstractUnionFunctional = domainIsAbstractUnionFunctional;
    }
    public String getDomainIsAbstractUnionFunctional(){
        return domainIsAbstractUnionFunctional;
    }

}

