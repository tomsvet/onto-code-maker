from rdflib import URIRef
from Vocabulary import Vocabulary
 
from .OntoEntity import OntoEntity


##
#  This is the class representing the Human(http://www.ontocodemaker.org/Family#Human) class from ontology
#
#  Human
#  Main Human class
#   Generated by OntoCodeMaker
##

class EquivalenceHumanPerson ( OntoEntity):


    def __init__(self,iri):
        super().__init__(iri)

        # Property http://www.ontocodemaker.org/Family#hasLuckyNumbers 6
        #  These are lucky numbers
        #  hasLuckyNumbers
        self.hasLuckyNumbers  = set() 

        # Property http://www.ontocodemaker.org/Family#hasAge 6
        #  This is hasAge
        #  hasAge
        self.hasAge  = None 

        # Property http://www.ontocodemaker.org/Family#hasCat 6
        self.hasCat  = set() 

        # Property http://www.ontocodemaker.org/Family#hasDog 6
        #  This is hasDog
        #  hasDog
        self.hasDog  = None 

        # Property http://www.ontocodemaker.org/Family#age 6
        # The property is SubProperty of  hasAge
        self.age  = set() 

        # Property http://www.ontocodemaker.org/Family#hasDogEq 6
        # The property is equivalent to hasDog
        self.hasDogEq  = set() 



    def addHasLuckyNumbers(self, hasLuckyNumbers):
        self.hasLuckyNumbers.add(hasLuckyNumbers)


    def getHasLuckyNumbers(self):
        return self.hasLuckyNumbers

    def setHasAge(self, hasAge):
        self.hasAge = hasAge


    def getHasAge(self):
        return self.hasAge

    def addHasCat(self, hasCat):
        self.hasCat.add(hasCat)


    def getHasCat(self):
        return self.hasCat

    def setHasDog(self, hasDog):
        self.hasDog = hasDog
        if not self.hasDog in self.hasDogEq:
            self.hasDogEq.add(hasDog)


    def getHasDog(self):
        return self.hasDog

    def addAge(self, age):
        self.age.add(age)
        if not self.hasAge == age:
            self.hasAge = age


    def getAge(self):
        return self.age

    def getHasDogEq(self):
        return self.hasDogEq


