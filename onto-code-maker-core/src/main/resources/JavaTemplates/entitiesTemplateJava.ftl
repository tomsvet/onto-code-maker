package ${package};

import org.eclipse.rdf4j.model.IRI;
<#list imports as item>
    import ${item};
</#list>

/**
<#if classRep??>
<#list classRep.labels as label>
*  ${label}
</#list>
*
<#list classRep.comments as comment>
*  ${comment}
</#list>
*
<#if classRep.creator??>
*  Author of class ${classRep.creator}
</#if>
</#if>
*   Generated by OntoCodeMaker
**/
public<#if isInterface == true > interface<#else> class</#if> ${className}<#if isExtended == true><#if extendClass??> extends ${extendClass}<#else> implements <#list classRep.getSuperClasses() as superClass> ${superClass.name}Int<#sep>,</#list></#if></#if> {

<#if isInterface ==false>
    <#if extendedInterface == true>
    protected IRI iri;
    </#if>
    public static IRI CLASS_IRI = ${vocabularyFileName}.${classRep.getConstantName()};
</#if>
<#if isInterface ==false>
<#list classRep.properties as property>

    /**
    *
    **/
    <#if property.isPrivate ==true>private<#else>public</#if> <#if property.isFunctional() == true>${property.rangeDatatype}<#else>List<${property.rangeDatatype}></#if> ${property.name} <#if property.isValue() == true> = ${property.getValue()} </#if>;
</#list>

    public ${className}(IRI iri){
            <#if extendedInterface == false>
            super(iri);
            <#else>
            this.iri = iri;
            </#if>
    }
</#if>

<#if isInterface ==true>
    <#if mainInterface == true>
    public IRI getIri();

    public IRI getClassIRI();
    </#if>
<#else>
    <#if extendedInterface == true>
    public IRI getIri(){
        return iri;
    }
    </#if>

    public IRI getClassIRI() {
        return CLASS_IRI;
    }
</#if>

<#if isInterface ==false>
<#list classRep.properties as property>
    <#if property.isFunctional() == true>
     public void set${property.name?cap_first}(${property.rangeDatatype} ${property.name}){
        this.${property.name} = ${property.name};
     }
    <#else>
    public void add${property.name?cap_first}(${property.rangeDatatype} ${property.name}){
        if (this.${property.name} == null) this.${property.name} = new ArrayList<>();
        this.${property.name}.add(${property.name});
    }
    </#if>

    public <#if property.isFunctional() == true>${property.rangeDatatype}<#else>List<${property.rangeDatatype}></#if> get${property.name?cap_first}(){
        return ${property.name};
    }

</#list>
</#if>
}