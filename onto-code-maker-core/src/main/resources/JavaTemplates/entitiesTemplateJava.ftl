<#macro variableComment property>
<#if property.isSubProperty() ==true>
    * The property is SubProperty of <#list property.getSuperProperties() as subProp> ${subProp.name}<#sep>,</#list>
</#if>
<#if property.isEquivalentTo??>
    * The property is equivalent to ${property.getIsEquivalentTo().name}
</#if>
<#list property.comments as comment>
*  ${comment}
</#list>
<#list property.labels as label>
*  ${label}
</#list>
</#macro>
<#macro settingProperty property>
<#if property.isSubProperty() ==true>
<#list property.getSuperProperties() as subProp>
<#if subProp.isFunctional() == true>
        if(this.${subProp.name?uncap_first} == null || !this.${subProp.name?uncap_first}.equals(${property.name})){
            set${subProp.name?cap_first}(${property.name});
        }
<#else>
        if(!this.${subProp.name?uncap_first}.contains(${property.name})){
            add${subProp.name?cap_first}(${property.name});
        }
</#if>
</#list>
</#if>
<#if property.isEquivalentTo??>
<#if property.isEquivalentTo.isFunctional() == true>
        if(this.${property.isEquivalentTo.name?uncap_first} == null || !this.${property.isEquivalentTo.name?uncap_first}.equals(${property.name})){
            this.${property.isEquivalentTo.name?uncap_first} = ${property.name};
        }
<#else>
        if(!this.${property.isEquivalentTo.name?uncap_first}.contains(${property.name})){
            this.${property.isEquivalentTo.name?uncap_first}.add(${property.name});
        }
</#if>
</#if>
<#list property.equivalentProperties as eqProp>
<#if eqProp.isFunctional() == true>
        if(this.${eqProp.name?uncap_first} == null || !this.${eqProp.name?uncap_first}.equals(${property.name})){
            this.${eqProp.name?uncap_first} = ${property.name};
        }
<#else>
        if(!this.${eqProp.name?uncap_first}.contains(${property.name})){
            this.${eqProp.name?uncap_first}.add(${property.name});
        }
</#if>
</#list>
</#macro>
<#macro compress_single_line>
    <#local captured><#nested></#local>
${ captured?replace("\\n|\\r", "", "rm") }
</#macro>
package ${package};

import org.eclipse.rdf4j.model.*;
import java.util.List;
<#if isInterface ==false>
import java.util.ArrayList;
<#if isAbstract ==false>
import ${rawPackage}.${vocabularyFileName};
</#if>
</#if>

/**
*  <@compress_single_line>
<#if classRep?? && isInterface == false>This is the class representing the ${classRep.name} class from ontology<#elseif mainInterface == true>This is a base class for all the generated entities.
<#elseif isEquivalent ??> This is interface representing equivalence of classes<#elseif isInterface == true> This is interface for class ${className} </#if>
</@compress_single_line>
*
<#if classRep?? && isInterface == false>
<#list classRep.labels as label>
*  ${label}
</#list>
<#list classRep.comments as comment>
*  ${comment}
</#list>
<#if classRep.creator??>
*  Author of class ${classRep.creator}
</#if>
</#if>
*   Generated by OntoCodeMaker
**/
<@compress_single_line>
public<#if isInterface == true > interface<#else><#if isAbstract == true> abstract</#if> class</#if> ${className}
<#if mainInterface == false>
<#if isExtends == true >
 extends <#list extendClasses as extendClass> ${extendClass}<#sep>,</#list>
</#if>

<#if isImplements == true >
 implements <#list implementClasses as implementClass> ${implementClass}<#sep>,</#list>
</#if>

</#if> {
</@compress_single_line>

<#if isInterface ==false && isAbstract == false>
    <#if extendedInterface == true>
    // IRI instance
    protected IRI iri;
    </#if>
    <#if isAbstract == false>
    // IRI Constant of Class
    public static IRI CLASS_IRI = ${vocabularyFileName}.${classRep.getConstantName()};
    </#if>
</#if>
<#if isInterface ==false>
<#list classRep.properties as property>

    /**
    * Property ${property.getStringIRI()}
    <@variableComment property=property/>
    **/
    <#if property.isPrivate ==true>private<#else>public</#if> <#if property.isFunctional() == true>${property.rangeDatatype}<#else>List<${property.rangeDatatype}></#if> ${property.name}<#if property.isFunctional() == false> = new ArrayList<>()</#if>;
</#list>

<@superVariables classRep=classRep/>

    public ${className}(IRI iri){
            <#if extendedInterface == false>
            super(iri);
            <#else>
            this.iri = iri;
            </#if>
    }
</#if>

<#if isInterface ==true>
    <#if mainInterface == true>
    public IRI getIri();

    public IRI getClassIRI();
    <#else>
    <#list classRep.properties as property>
    <#if ! property.isEquivalentTo ??>
    <#if property.isFunctional() == true>
    void set${property.name?cap_first}(${property.rangeDatatype} ${property.name});
    <#else>
    void add${property.name?cap_first}(${property.rangeDatatype} ${property.name});
    </#if>
    </#if>
    <#if property.isFunctional() == true>${property.rangeDatatype}<#else>List<${property.rangeDatatype}></#if> get${property.name?cap_first}();
    </#list>
    </#if>
<#else>
    <#if extendedInterface == true>
    public IRI getIri(){
        return iri;
    }
    </#if>

    <#if isAbstract == false>
    public IRI getClassIRI() {
        return CLASS_IRI;
    }
    </#if>
</#if>

<#if isInterface ==false>
<#list classRep.properties as property>
<#if property.isEquivalentTo ??>
<#else>
    <#if property.isFunctional() == true>
    public void set${property.name?cap_first}(${property.rangeDatatype} ${property.name}){
        this.${property.name} = ${property.name};
        <@settingProperty property/>
    }
    <#else>
    public void add${property.name?cap_first}(${property.rangeDatatype} ${property.name}){
        this.${property.name}.add(${property.name});
        <@settingProperty property/>
    }
    </#if>
</#if>
    public <#if property.isFunctional() == true>${property.rangeDatatype}<#else>List<${property.rangeDatatype}></#if> get${property.name?cap_first}(){
        return ${property.name};
    }

</#list>

    <@setterAndGetters classRep=classRep />

</#if>
}

<#macro superVariables classRep >
<#list classRep.getSuperClasses() as superClass>
<#if superClass.hasInterface>
<#list superClass.properties as property>
    /**
    * Property ${property.getStringIRI()}. This property is from super class.
    <@variableComment property=property/>
    **/
    <#if property.isPrivate ==true>private<#else>public</#if> <#if property.isFunctional() == true>${property.rangeDatatype}<#else>List<${property.rangeDatatype}></#if> ${property.name}<#if property.isFunctional() == false> = new ArrayList<>()</#if>;

</#list>
<@superVariables classRep=superClass />
</#if>
</#list>
</#macro>


<#macro setterAndGetters classRep >
<#list classRep.getSuperClasses() as superClass>
<#if superClass.hasInterface>
<#list superClass.properties as property>
<#if ! property.isEquivalentTo ??>
    <#if property.isFunctional() == true>
    public void set${property.name?cap_first}(${property.rangeDatatype} ${property.name}){
        this.${property.name} = ${property.name};
        <@settingProperty property/>
    }
    <#else>
    public void add${property.name?cap_first}(${property.rangeDatatype} ${property.name}){
        this.${property.name}.add(${property.name});
        <@settingProperty property/>
    }
    </#if>
</#if>
    public <#if property.isFunctional() == true>${property.rangeDatatype}<#else>List<${property.rangeDatatype}></#if> get${property.name?cap_first}(){
        return ${property.name};
    }
</#list>
<@setterAndGetters classRep=superClass />
</#if>
</#list>
</#macro>