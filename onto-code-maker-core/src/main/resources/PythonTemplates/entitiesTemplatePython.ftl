<#macro variableComment property>
<#if property.isSubProperty() ==true>
        # The property is SubProperty of <#list property.getSuperProperties() as subProp> ${subProp.name}<#sep>,</#list>
</#if>
<#if property.isEquivalentTo??>
        # The property is equivalent to ${property.getIsEquivalentTo().name}
</#if>
<#list property.comments as comment>
    #  ${comment}
</#list>
<#list property.labels as label>
    #  ${label}
</#list>
</#macro>
<#macro settingProperty property>
<#if property.isSubProperty() ==true>
<#list property.getSuperProperties() as subProp>
<#if subProp.isFunctional() == true>
        if not self.${subProp.name?uncap_first} == ${property.name}:
            set${subProp.name?cap_first}(${property.name})

<#else>
        if not ${property.name} in self.${subProp.name?uncap_first}:
            add${subProp.name?cap_first}(${property.name})
</#if>
</#list>
</#if>
<#if property.isEquivalentTo??>
<#if property.isEquivalentTo.isFunctional() == true>
        if not self.${property.isEquivalentTo.name?uncap_first} == ${property.name}:
            set${property.isEquivalentTo.name?cap_first}(${property.name})
<#else>
        if not ${property.name} in self.${property.isEquivalentTo.name?uncap_first}:
            add${property.isEquivalentTo.name?cap_first}(${property.name})
</#if>
</#if>
<#list property.equivalentProperties as eqProp>
<#if eqProp.isFunctional() == true>
        if not self.${eqProp.name?uncap_first} == ${property.name}:
            set${eqProp.name?cap_first}(${property.name})
<#else>
        if not ${property.name} in self.${eqProp.name?uncap_first}:
            add${eqProp.name?cap_first}(${property.name})
</#if>
</#list>
</#macro>
from rdflib import URIRef
<#list imports as item>
from ${item.lib} import ${item.item}
</#list>


<#if classRep??>
<#list classRep.labels as label>
#  ${label}
</#list>
#
<#list classRep.comments as comment>
#  ${comment}
</#list>
#
<#if classRep.creator??>
#  Author of class ${classRep.creator}
</#if>
</#if>
#   Generated by OntoCodeMaker
#
class ${className}<#if isExtended == true>(<#if extendClass??> ${extendClass}<#else><#list classRep.getSuperClasses() as superClass> ${superClass.name}<#sep>,</#list></#if>)</#if>:
<#if isClass == true>
    CLASS_IRI = ${vocabularyFileName}.${classRep.getConstantName()}
</#if>

<#if isMainClass == true >
    def __init__(self,iri):
        self.iri = iri

    def getiri(self):
        return self.iri
<#else>

<#if isClass == true>
    def __init__(self,iri):
        super().__init__()
        <#list classRep.properties as property>
        #Property ${property.getStringIRI()}
        <@variableComment property=property/>
        self.${property.name} <#if property.isValue() == true> = ${property.getValue()}<#else> = None </#if>
        </#list>

    def getClassIRI():
        return CLASS_IRI

<#list classRep.properties as property>
    <#if property.isFunctional() == true>
    def set${property.name?cap_first}(self, ${property.name}):
        self.${property.name} = ${property.name}

        <@settingProperty property=property/>

    <#else>
    def add${property.name?cap_first}(self, ${property.name}):
        if (self.${property.name} == None) self.${property.name} = set()
        self.${property.name}.add(${property.name})
        <@settingProperty property=property/>

    </#if>

    def get${property.name?cap_first}():
        return self.${property.name}

</#list>
</#if>

</#if>
