from rdflib import URIRef


##
<#if typeOfFactory == "Ontology">
# This Code is generated from these ontologies
<#list ontologies as ontology>
# Ontology: ${ontology.name}
<#if ontology.priorVersion??># Prior version: ${ontology.priorVersion} </#if>
<#list ontology.imports as import>
#   Import: ${import}
</#list>
#
<#list ontology.comments as comment>
#   ${comment}
</#list>
<#list ontology.labels as label>
#   ${label}
</#list>
<#if ontology.creator??>
#   Author of ontology ${ontology.creator}
</#if>
</#list>
</#if>
#
#
#   Generated by OntoCodeMaker
##
class ${classFileName?cap_first}:
<#if typeOfFactory == "Serialization">
    def getSerializationInstanceFromEntity(entity):
     <#list serializationClasses as serialization>
        if type(entity) is ${serialization.name?cap_first}:
            return ${serialization.getSerializationClassName()?cap_first}()

     </#list>
        return None

     def getSerializationInstanceFromIri(classIri):
          <#list serializationClasses as serialization>
             if classIri.equals(${vocabularyFileName}.${serialization.getConstantName()}:
                 return ${serialization.getSerializationClassName()?cap_first}()

          </#list>
             return None

<#else>
    def __init__(self, ontology):
        self.ontology = ontology
        <#list serializationClasses as serialization>
            self.${serialization.getSerializationClassName()?uncap_first} = ${serialization.getSerializationClassName()?cap_first}()
        </#list>

    def getOntology(self):
        return self.ontology

    <#list serializationClasses as serialization>

    def create${serialization.name?cap_first}(name):
        return ${serialization.name?cap_first}(URIRef(name))

    def addToModel(self,entity){
        if isinstance(entity, ${serialization.name?cap_first}):
            self.${serialization.getSerializationClassName()?uncap_first}.addToModel(ontology, entity)

    def get${serialization.name?cap_first}FromModel(self,name):
        return self.${serialization.getSerializationClassName()?uncap_first}.getInstanceFromModel(ontology,URIRef(name))

    def getAll${serialization.name?cap_first}InstancesFromModel(self):
        return self.${serialization.getSerializationClassName()?uncap_first}.getAllInstancesFromModel(self.ontology)

    def remove${serialization.name?cap_first}FromModel(self,name):
        self.${serialization.getSerializationClassName()?uncap_first}.removeInstanceFromModel(self.ontology,URIRef(name))

    </#list>
</#if>