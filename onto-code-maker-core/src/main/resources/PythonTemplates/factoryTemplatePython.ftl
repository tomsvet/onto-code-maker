from rdflib import URIRef
from rdflib.namespace import RDF
<#list  serializationClasses as serialization>
<#if typeOfFactory == "Serialization">
from ${serializationPackage}.${serialization.getSerializationClassName()} import ${serialization.getSerializationClassName()}
</#if>
from ${entityPackage}.${serialization.name?cap_first} import ${serialization.name?cap_first}
</#list>
from ${vocabularyFileName} import ${vocabularyFileName}
<#if serializationFactory??>
from ${serializationFactory} import ${serializationFactory}
</#if>
##
<#if typeOfFactory == "Ontology">
# This Code is generated from these ontologies
<#list ontologies as ontology>
# Ontology: ${ontology.name}
<#if ontology.priorVersion??># Prior version: ${ontology.priorVersion} </#if>
<#list ontology.imports as import>
#   Import: ${import}
</#list>
#
<#list ontology.comments as comment>
#   ${comment}
</#list>
<#list ontology.labels as label>
#   ${label}
</#list>
<#if ontology.creator??>
#   Author of ontology ${ontology.creator}
</#if>
</#list>
</#if>
#
#
#   Generated by OntoCodeMaker
##
class ${classFileName?cap_first}:
<#if typeOfFactory == "Serialization">
    def getSerializationInstanceFromEntity(self,entity):
    <#list serializationClasses as serialization>
        if type(entity) is ${serialization.name?cap_first}:
            return ${serialization.getSerializationClassName()?cap_first}()

    </#list>
        return None

    def getSerializationInstanceFromIri(self,classIri):
        <#list serializationClasses as serialization>
        if classIri == ${vocabularyFileName}.${serialization.getConstantName()}:
            return ${serialization.getSerializationClassName()?cap_first}()

        </#list>
        return None

    def getSerializationInstance(self, ontology, instanceIri):
        classIri = self.getFirstIriObject(ontology, RDF.type, instanceIri)
        <#list serializationClasses as serialization>
        if classIri == ${vocabularyFileName}.${serialization.getConstantName()}:
            return ${serialization.getSerializationClassName()?cap_first}()
       </#list>
        return None

    def getFirstIriObject(self,ontology, predicate, subject):
        for object in ontology.objects(subject,predicate):
            if isinstance(object,URIRef):
                return object
        return None

<#else>
    def __init__(self, ontology):
        self.ontology = ontology
        self.serializationFactory = ${serializationFactory?cap_first}()

    def getOntology(self):
        return self.ontology

    def addToModel(self, entity):
        self.serializationFactory.getSerializationInstanceFromEntity(entity).addToModel(self.ontology, entity)

    <#list serializationClasses as serialization>

    def create${serialization.name?cap_first}(self,name):
        return ${serialization.name?cap_first}(URIRef(name))

    def get${serialization.name?cap_first}FromModel(self,name):
        return self.serializationFactory.getSerializationInstanceFromIri(${vocabularyFileName}.${serialization.getConstantName()}).getInstanceFromModel(self.ontology,URIRef(name),2)

    def getAll${serialization.name?cap_first}InstancesFromModel(self):
        return self.serializationFactory.getSerializationInstanceFromIri(${vocabularyFileName}.${serialization.getConstantName()}).getAllInstancesFromModel(self.ontology,2)

    def remove${serialization.name?cap_first}FromModel(self,name):
        self.serializationFactory.getSerializationInstanceFromIri(${vocabularyFileName}.${serialization.getConstantName()}).removeInstanceFromModel(self.ontology,URIRef(name))

    </#list>
</#if>